import pandas as pd
import os

def get_DB_path():
    """
    Constructs and returns the path to the 'dbs' directory, which is located in the parent
    directory of the script currently being executed.

    Returns:
        str: The absolute path to the 'dbs' directory.
    """
    DB_PATH = "\\".join(os.path.dirname(os.path.abspath(__file__)).split("\\")[:-1])
    return  os.path.join(DB_PATH, "dbs")

def get_data_from_SAaDd():
    """
    Loads data from the 'Students Anxiety and Depression Dataset.xlsx'. 
    The function attempts to open and read the dataset, converting its contents
    into a list of lists.

    Returns:
        list: A list of lists containing the data from the Excel file if file is found.
        int: Returns -1 if the file is not found.

    Raises:
        FileNotFoundError: If the Excel file is not found at the specified path.
    """
    try:
        path = os.path.join(get_DB_path(), "Students Anxiety and Depression Dataset.xlsx")
        data = pd.read_excel(path)

        return data.values.tolist() # [['oh my gosh', 1.0],...]
    
    except FileNotFoundError:
        return -1
    


def get_data_from_ddrc():
    """
    Loads data from the 'Depression_dataset_reddit_cleaned.xlsx'. 
    The function attempts to open and read the dataset, converting its contents
    into a list of lists.

    Returns:
        list: A list of lists containing the data from the Excel file if file is found.
        int: Returns -1 if the file is not found.

    Raises:
        FileNotFoundError: If the Excel file is not found at the specified path.
    """
    try:
        path = os.path.join(get_DB_path(), "depression_dataset_reddit_cleaned.csv")
        dataframe = pd.read_csv(path)
        return dataframe.values.tolist() # [['oh my gosh', 1],...]
    except FileNotFoundError:
        return -1

def create_dataset(data, file_name = "composite_db.csv"):
    """
    Creates a CSV file from the provided data and saves it to the specified file within the 'dbs' directory.
    The CSV file will include an index column automatically generated by pandas, alongside two specified
    columns: 'Data' for text data and 'Value' where 1 indicates depression and 0 indicates no depression.

    Args:
        data (list of lists): Data to be saved into the CSV file. Each sublist should contain two elements:
                            the text data and its associated binary value (1 or 0).
        file_name (str, optional): Name of the file to save the data to. Defaults to "composite_db.csv".

    Returns:
        None: The function does not return any value but writes directly to a file.
    """
    path = os.path.join(get_DB_path(), file_name)

    df = pd.DataFrame(data, columns=["Data", "Value (1 is depressed / 0 is not depressed)"])
    df.to_csv(path, index=True)

def get_data_from_composite_dataset(file_name="composite_db.csv", cases=True):
    """
    Loads data from a CSV file located in the 'dbs' directory and optionally filters the rows based
    on the depression indicator (third column in the dataset). It also ensures that the second column
    entries, expected to be strings, are correctly typed.

    Args:
        file_name (str, optional): Name of the CSV file to load data from. Defaults to "composite_db.csv".
        cases (bool, optional): Filter condition to apply on the 'Value' column which represents depression.
                                If True, only rows where the 'Value' is 1 are returned.
                                If False, only rows where the 'Value' is 0 are returned.
                                Defaults to True.

    Returns:
        list: A list of rows from the CSV file that meet the specified condition and where the second
            column's entries are strings. Each row is a list itself.
        int: Returns -1 if the CSV file is not found at the specified path.

    Raises:
        FileNotFoundError: If the CSV file is not found at the specified path.
    """    
    try:
        path = os.path.join(get_DB_path(), file_name)
        dataframe = pd.read_csv(path)

        if cases in [True, False]:  
            dataframe = dataframe[dataframe.iloc[:, 2] == int(cases)]
        return [element for index, element in enumerate(dataframe.values.tolist()) if isinstance(element[1], str)]
    except FileNotFoundError:
        return -1

